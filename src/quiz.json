{
    "questions" : [
        {
            "question": "How would you check if a number is an integer?",
            "answer": "```js\nfunction isInt(num) {\n     return num % 1 === 0;\n}\n\nconsole.log(isInt(4)); // true\nconsole.log(isInt(12.2)); // false\nconsole.log(isInt(0.3)); // false\n```"
        },
        {
            "question": "What will the following code output?\n\n```js\n(function() {\n     var a = b = 5;\n})();\n\nconsole.log(b);\n```",
            "answer": "The code above will output 5 even though it seems as if the variable was declared within a function and can't be accessed outside of it. This is because\n```js\nvar a = b = 5; \n```\nis interpreted the following way:\n```js\nvar a = b;\nb=5;\n```\n But b is not declared anywhere in the function with var so it is set equal to 5 in the global scope"
        },
        {
            "question": "What does NULL mean in Javascript?",
            "answer": "The NULL value is used to represent no value or no object. It implies no object or null string, no valid boolean value, no number and no array object."
        },
        {
            "question": "What is an undefined value in JavaScript?",
            "answer": "Undefined value means \n1. The Variable used in the code doesn't exist\n2. Variable is not assigned to any value\n3.Property doesn't exist"
        },
        {
            "question": "What is the use of Void(0)?",
            "answer": "Void(0) is used to prevent the page from refreshing and parameter \"zero\" is passed while calling.\nVoid(0) is used to call another method without refreshing the page."
        },
        {
            "question": "What is a Callback?",
            "answer": "A callback is a plain JavaScript function passed to some method as an argument or option. It is a function that is to be executed after another function has finished executing, hence the name ‘call back‘. In JavaScript, functions are objects. Because of this, functions can take functions as arguments, and can be returned by other functions."
        },
        {
            "question": "What is a Closure? Give an example",
            "answer": "Closures are created whenever a variable that is defined outside the current scope is accessed from within some inner scope. It gives you access to an outer function’s scope from an inner function. In JavaScript, closures are created every time a function is created. To use a closure, simply define a function inside another function and expose it."
        },
        {
            "question": " How does the TypeOf Operator work?",
            "answer": "The typeof operator is used to get the data type of its operand. The operand can be either a literal or a data structure such as a variable, a function, or an object. It is a unary operator that is placed before its single operand, which can be of any type. Its value is a string indicating the data type of the operand."
        },
        {
            "question": "What are the ways to define a variable in JavaScript?",
            "answer": "The three possible ways of defining a variable in JavaScript are:\nVar – The JavaScript variables statement is used to declare a variable and, optionally, we can initialize the value of that variable. Example: var a =10; Variable declarations are processed before the execution of the code.\nConst – The idea of const functions is not allow them to modify the object on which they are called. When a function is declared as const, it can be called on any type of object.\nLet – It is a signal that the variable may be reassigned, such as a counter in a loop, or a value swap in an algorithm. It also signals that the variable will be used only in the block it’s defined in."
        },
        {
            "question": "What is the difference between the operators ‘==‘ & ‘===‘?",
            "answer": "The main difference between “==” and “===” operator is that formerly compares variable by making type correction e.g. if you compare a number with a string with numeric literal, == allows that, but === doesn’t allow that, because it not only checks the value but also type of two variable, if two variables are not of the same type “===” return false, while “==” return true."
        }
    ]
}